 * dry runs for locking functions
 * timely asynchronous flushing to disk after iterating over the hashtable, for only dirty pages on which only read locks or no locks are held, i.e. on which a read lock can be held while we flush it to disk
 * aschronous request to bring a page in the bufferpool, disregard the request if the page is already in bufferpool, here a dirty page can not be evicted
 * if to_be_overwritten, memset the page to 0 without reading it.

 * testcases
 * specific test case tailored to 4-5 threads reading the same same, print after they get lock and wait for seconds, and make 2 of them to try to upgrade the lock, a lot of test cases will be covered in this special test case
 * restructure the test cases to allow the above mentioned test case, bringing common code together.
 * test original test case with higher thread count then the number of buffers with evict_if_necessary set to false, and a combination of both.